/* tslint:disable */
/* eslint-disable */
/**
 * GomokuNarabe API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddMoveRequest
 */
export interface AddMoveRequest {
    /**
     * 
     * @type {string}
     * @memberof AddMoveRequest
     */
    'player': string;
    /**
     * 
     * @type {number}
     * @memberof AddMoveRequest
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof AddMoveRequest
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface AddMoveResponse
 */
export interface AddMoveResponse {
    /**
     * 
     * @type {string}
     * @memberof AddMoveResponse
     */
    'game_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddMoveResponse
     */
    'player1'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddMoveResponse
     */
    'player2'?: string;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof AddMoveResponse
     */
    'board'?: Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface CreateGameRequest
 */
export interface CreateGameRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateGameRequest
     */
    'player1': string;
    /**
     * 
     * @type {string}
     * @memberof CreateGameRequest
     */
    'player2': string;
}
/**
 * 
 * @export
 * @interface CreateGameResponse
 */
export interface CreateGameResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateGameResponse
     */
    'game_id'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GetGameResponse
 */
export interface GetGameResponse {
    /**
     * 
     * @type {string}
     * @memberof GetGameResponse
     */
    'game_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetGameResponse
     */
    'player1'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetGameResponse
     */
    'player2'?: string;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof GetGameResponse
     */
    'board'?: Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface UpdateGameRequest
 */
export interface UpdateGameRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGameRequest
     */
    'player1'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGameRequest
     */
    'player2'?: string;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof UpdateGameRequest
     */
    'board'?: Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface UpdateGameResponse
 */
export interface UpdateGameResponse {
    /**
     * 
     * @type {string}
     * @memberof UpdateGameResponse
     */
    'game_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGameResponse
     */
    'player1'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGameResponse
     */
    'player2'?: string;
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof UpdateGameResponse
     */
    'board'?: Array<Array<string>>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a move to a game
         * @param {string} gameId 
         * @param {AddMoveRequest} [addMoveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMove: async (gameId: string, addMoveRequest?: AddMoveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('addMove', 'gameId', gameId)
            const localVarPath = `/add_move/{gameId}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame: async (createGameRequest?: CreateGameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a game by ID
         * @param {string} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame: async (gameId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('getGame', 'gameId', gameId)
            const localVarPath = `/games/{gameId}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a game by ID
         * @param {string} gameId 
         * @param {UpdateGameRequest} [updateGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGame: async (gameId: string, updateGameRequest?: UpdateGameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('updateGame', 'gameId', gameId)
            const localVarPath = `/games/{gameId}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a move to a game
         * @param {string} gameId 
         * @param {AddMoveRequest} [addMoveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMove(gameId: string, addMoveRequest?: AddMoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddMoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMove(gameId, addMoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGame(createGameRequest?: CreateGameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGame(createGameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a game by ID
         * @param {string} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(gameId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGame(gameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a game by ID
         * @param {string} gameId 
         * @param {UpdateGameRequest} [updateGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGame(gameId: string, updateGameRequest?: UpdateGameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateGameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGame(gameId, updateGameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a move to a game
         * @param {string} gameId 
         * @param {AddMoveRequest} [addMoveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMove(gameId: string, addMoveRequest?: AddMoveRequest, options?: any): AxiosPromise<AddMoveResponse> {
            return localVarFp.addMove(gameId, addMoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame(createGameRequest?: CreateGameRequest, options?: any): AxiosPromise<CreateGameResponse> {
            return localVarFp.createGame(createGameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a game by ID
         * @param {string} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(gameId: string, options?: any): AxiosPromise<GetGameResponse> {
            return localVarFp.getGame(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a game by ID
         * @param {string} gameId 
         * @param {UpdateGameRequest} [updateGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGame(gameId: string, updateGameRequest?: UpdateGameRequest, options?: any): AxiosPromise<UpdateGameResponse> {
            return localVarFp.updateGame(gameId, updateGameRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add a move to a game
     * @param {string} gameId 
     * @param {AddMoveRequest} [addMoveRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addMove(gameId: string, addMoveRequest?: AddMoveRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addMove(gameId, addMoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a game
     * @param {CreateGameRequest} [createGameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGame(createGameRequest?: CreateGameRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGame(createGameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a game by ID
     * @param {string} gameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGame(gameId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGame(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a game by ID
     * @param {string} gameId 
     * @param {UpdateGameRequest} [updateGameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateGame(gameId: string, updateGameRequest?: UpdateGameRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateGame(gameId, updateGameRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



